Iterators y Iterables en Python

    Es importante aclarar que los iterables y los iteradores son dos conceptos relacionados pero no son iguales, mientras los iterables son objetos 
    que en su interior contienen elementos que pueden ser iterados, los iteradores son objetos que hacen referencia a uno de los elementos de un 
    iterable. Ambos deben seguir el protocolo de iteracion de python, es decir, deben contar con un metodo __iter__() que retorne un objeto iterator
    y un metodo __next__() que retorne el siguiente elemento del iterable.

    Iterables:

    Son objeto de python que pueden ser iterados, es decir que son idexables, por ejemplo un array o lista puede ser iterada,
    un string tambien puede ser iterado, un diccionario tambien puede ser iterado, etc.


    Iterators o Iteraores:

    Son objetos de python que hacen referencia a un elemento ya que cuenta con un metodo de next() que permite acceder al siguiente elemento
    del iterable.

    Un iterable no es un iterador, pero un iterador es un iterable.

    Los iteradores son objetos que hace un a referencia al elemento de un iterable, existen varios tipo de iteradores, por ejemplo:

        - ListIterator  : Iterador de listas
        - TupleIterator : Iterador de tuplas
        - StrIterator   : Iterador de strings
        - DictKeyIterator : Iterador de claves de diccionarios
        - DictValueIterator : Iterador de valores de diccionarios
        - DictItemIterator : Iterador de items de diccionarios
        - SetIterator : Iterador de conjuntos

    Para crear un objeto iterator en python utilizamos el metodo de iter() que recibe como parametro un iterable, por ejemplo:

        Funcion iter(iterable) : 
            Retorna un objeto iterator, tomando como primer argumento un iterable del cual sera el iterador.


    Los iteradores cumplen con dos funciones impoirtantes que marcan un antes y un despues de un proceso, son implementadas segun un patron de 
    diseño llamado "Iterator Pattern" que es un patron de diseño de comportamiento que tiene como objetivo proporcionar un mecanismo eficiente
    para acceder secuencialmente a los elementos de una coleccion de objetos sin exponer la representacion interna de dicha coleccion.

    Las dos funciones importantes que cumplen los iteradores son:

        - __iter__() : 
            Este es el metodo especial o dunder method que devuelve un objeto iterator, es decir que cuenta con el metodo __next__() que
            permite acceder al siguiente elemento del iterable.
        - __next__() : Retorna el siguiente elemento del iterable.


    Constantemente son usados los iteradores dentro de python, muchas veces no son visibles pero estan ahi, por ejemplo cuando se hace un ciclo
    for, python crea un iterador implicitamente, por ejemplo:

        for i in range(10):
            print(i)

    En este caso python crea un iterador implicitamente para el objeto range(10), el cual es un iterable, y luego itera sobre el objeto
    iterador creado. Tambien pueden ser utilizads dentro de los comprehensions.

    En el dia a dia un programador no necesita crear un iterador explicitamente, pero es importante conocer como funcionan y como se crean
    para poder entender mejor el funcionamiento de python.