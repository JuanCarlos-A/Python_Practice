Control de Flujo

Para lograr un control en el flujo de la ejecucion de codigo, nostros utilizamos los operadores logicos y operadores de comparacion o relacion,
se les dice de relacion porque evaluan la relacion entre los dos objetos que comparan, los logicos comparan los valores booleans para saber
si las relaciones entre varios objetos es cierta o falsa.


Dentro de las keywords de python entran los condicionales, estos condicionales son if, elif, else, switch, con estas palabras claves o keywords tu puedes
decirle al interprete de python que ejecute ciertas cantidades de codigo se gun la comparacion que se realice dentro del statement. Es muy importante el orden en como 
se comparan los objetos ya que si no se tiene una coherencia en el orden de ejecucion se pueden descartar automaicamente algunas lineas de codigo.

Dentro de los tipos de declaracion de estos ternarios esta la forma larga
    if condition:
        result
    elif condition:
        result
    else:
        result

Pero tambien existen forma de declararlo dentro de una linea usando el operador ternario

    Result in case A + condition + Result in case B

    print(result) if condition else print(result)

Tambien se puede crear dentro de una declaracion de variable (En python las variables son en realidad nombres para referirse a un objeto de una clase, si un objeto es igual a otro entonces se guardan dentro de un mismo espacio)

    variable = (result) if condition else (result)


Operadores logicos

Estos operadores evaluan si las comparaciones realizadas con los operadores de comparacion son verdaderas o en parte son verdaderas, cabe aclarar que si una logica dentro
de un condicional se cumple, entonces el resto de la logica no es evaluada. A estas operaciones se les conoce como operaciones de corto circuito.


Operaciones de Corto circuito

Esto indica que la operacion solo se ejecutara hasta donde el interprete entienda que es necesario evaluar por ejemplo en un operador logico como lo es and, si la condicion o 
el objeto de la izquierda es False entonces no se ejecutara el resto de la condicion.


Encadenar los operadores de comparacion

Cuando encadenamos los operadores de comparacion podemos resumir una comparacion haciendo innecesario el uso de operadores logicos ya que podemos comparar en una expresion.


Ciclo

La funcion de los ciclos es poder iterar por cada elemento de una lista, tomando estos elementos y realizar operaciones con ellos, ya sea creando algo o actualizarlo
(dependiendo si el array es mutable). En estos ciclos se utilizan los operadores de pertenencia in o in not

    For:
        Con el iterador de for puedes recorrer una lista por cada elemento. Y si dentro del for no ejecutas un break, puedes dar un else, para que por defecto
        se ejecute un bloque de codigo. 

    While:
        Este es un ciclo que se ejecutara hasta que una condicion sea verdadera, lo que tambien hace que si la condicion al comienzo no es verdadera, este bucle no comenzara.

        Cuando un ciclo while es infinito este se ejecutara hasta acabar con la memoria de la maquina o hasta que el sistema operativo detecte que esta consumientdo muchos recursos
        y mate la aplicacion.

    Ciclos Anidados:
        Los ciclos anidados permiten recorrer con un dato otros datos, permitiendo por ejemplo comparar un elemento de una lista con otros elementos.

Iterables

Permite tener varios elementos dentro de un elemento para que esteos pueden ser utilizados por lso ciclos.