Clases en Python

Cuando se habla de una clase, esta es la estructura que tendra un objeto, es el plano con el cual
un objeto de esa clase se estructurara con sus atributos y metodos. Todo en python son clases y 
objetos de dichas clases, cuando creamos una variable, lo que creamos es una instancia de una clase
ya definida en python, o tambien podemos crear nuestras propias clases.

Las clases tienen su propia convencion o regla no estricta que indica el modo de escribir su nombre
que luego se utilizara para referenciar y este modo es el PascalCase o UpperCamelCase.

Estas clases estan sujetas al paradigma de la OOP o Object Oriented Programming, eso indica que 
las clases pueden ser heredadas, estar protegidas por el encapsulamiento, poder ser usadas en distintas
situaciones como lo son en el polimorfismo y ser generales para distintas situaciones, como lo es
la abstraccion.


Metodos y atributos

Estas son las caracteristicas que definen a un objeto de una clase, cuando declaramos un objeto
de la clase y necesitamos llamar a un metodo de la clase, nosotros necesitamos especificar que 
los atributos con los que va a trabajar sean del objeto con la palabra self.


Existen los metodos magicos o dunder

Estos metodos seran ejecutados implicitamente cuando la instancia de un objeto haga uso de ciertas caracteristicas que posee como objeto de una clase,
por ejemplo la mas conocida es el contructor de __init__() este es un constructor que como primer argumento to self, el argumento
de self es una convencion de los metodos no estaticos la cual permite hacer una referencia a la instancia de la clase.


atributos de clase

En python no solo existen los atributos de objetos o instancias, los atributos tambien pueden 
ser de clase. Estos atributos o propiedades desde la vista de logica significa que todos los 
objetos de una clase estan en todas las instancias.


Metodos de clase

Estos metodos son metodos que son posibles para cualquier instancia de las clases, metodos que sean posibles para todas las
instancias.


Metodo de Fabrica o un constructor alternativo

Este ejemplo de contructor alternativo permite crear una instancia de una clase de forma diferente al crear un metodo de clase.
El ejemplo es el siguiente usando el decorador de @classmethod.

@classmethod
def contructor_alternativo(cls) -> "Clase":
    return cls("Argumentos")


Atributos Privados

Estos atributos son privados ya que la clase los esconde para que las instancias de la
clase no puedan acceder a ellos sino tienen un metodo que les permita trabajar con ellos,
esto es la encapsulacion de la OOP.

La forma para poder declarar un atributo o propiedad de manera privadas es usando un 
doble undersocer antes del nombre de la propiedad, de esta manera nosotros vamos a poder decirle
al interprete que use mangling con la propiedad.

Los atributos privados y propiedades solo podran ser accedidos dentro de la clase.  


Metodo __dict__

Este metodo devolvera un  diccionario con toas las propiedades de la instancia o de la clase de la cual sea llamado.
Este metodo muestra como es el mangling dentro de python con las variables, ya que se enmascara la variable privada.


Decorador @Property

Con el decorador nosostros podemos declarar una funcion que trabaje como un getter y setter para una propiedad,
con esto nosotros podemos ocultar los metodos de setter y getter de una propiedad o atributo. Un ejemplo:

@property
def nombre(self):
    #Logica de getter
    pass 

@nombre.setter
def nombre(self):
    #Logica de setter
    pass